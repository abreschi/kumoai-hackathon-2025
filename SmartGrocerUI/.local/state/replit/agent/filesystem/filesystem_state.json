{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"kumoai>=2.6.0\",\n    \"numpy>=2.3.2\",\n    \"pandas>=2.3.1\",\n    \"pytz>=2025.2\",\n]\n","size_bytes":226},"replit.md":{"content":"# Smart Grocer - KumoAI Hackathon Demo 2025\n\n## Overview\n\nSmart Grocer is a demo application built for the KumoAI Hackathon Demo 2025 that showcases a hyper-personalized shopping cart system. The application predicts what users will buy based on their persona and shopping history, featuring an interactive frontend with user switching, cart management, product recommendations, and recipe inspiration. The project follows a \"scaffold first, predict later\" approach, prioritizing a fully functional and visually polished interface powered by mock data.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\nThe application uses a modern React-based single-page application (SPA) architecture with TypeScript. The frontend leverages Vite for development and build tooling, providing fast development server and optimized production builds. The UI is built with shadcn/ui components on top of Radix UI primitives and styled with Tailwind CSS using a custom design system with CSS variables for theming.\n\n### State Management\nGlobal application state is managed through React Context API via the AppProvider component. The primary state includes the active user ID for personalization, user profiles loaded from CSV data, shopping cart items, product recommendations, and recipe data. All components access this centralized state to provide consistent user experience across the application.\n\n### Backend Architecture\nThe backend follows an Express.js REST API architecture with TypeScript. The server includes middleware for logging, error handling, and development-time features. Routes are organized in a modular structure with a storage abstraction layer that currently uses in-memory storage but can be easily swapped for database persistence.\n\n### Component Architecture\nThe frontend uses a component-based architecture with reusable UI components:\n- ProductCard: Displays recommended products with add-to-cart functionality\n- CartItem: Manages individual cart items with quantity controls\n- RecipeCard: Shows recipe suggestions with missing ingredient lists\n- CheckoutView: Enhanced checkout modal with delivery time selection and substitution preferences\n- Modal dialogs for checkout and recipe inspiration\n- User profile switcher for demo personalization\n\n### Data Management\nThe application combines mock data with PostgreSQL database persistence. Mock data includes user personas, product catalogs, and shopping cart states loaded from CSV files. The database stores user preferences including delivery method history. Enhanced RAG + KumoRFM integration provides personalized ingredient recommendations with 3 ranked options per missing ingredient. Recipe generation is limited to 2 recipes for optimal user experience. Product substitution preferences are calculated based on historical order data and displayed with intelligent defaults in the checkout process.\n\n### Routing and Navigation\nClient-side routing is handled by Wouter, a lightweight routing library. The application currently has a single main route with modal-based navigation for additional features like checkout and recipe inspiration.\n\n## External Dependencies\n\n### UI and Styling\n- **Radix UI**: Provides accessible, unstyled UI primitives for all interactive components\n- **shadcn/ui**: Component library built on Radix UI with consistent design system\n- **Tailwind CSS**: Utility-first CSS framework with custom theme configuration\n- **Lucide React**: Icon library for consistent iconography\n\n### Data and State Management\n- **TanStack React Query**: Client-side data fetching and caching (configured but minimal usage in current implementation)\n- **Papa Parse**: CSV parsing library for loading user data from CSV files\n- **React Hook Form**: Form handling with validation (included but not actively used)\n\n### Development Tools\n- **Vite**: Build tool and development server with React plugin\n- **TypeScript**: Type safety across the entire application\n- **ESBuild**: Fast JavaScript bundler for production builds\n\n### Database and ORM\n- **Drizzle ORM**: Type-safe SQL ORM configured for PostgreSQL\n- **Neon Database**: Serverless PostgreSQL database service\n- **Drizzle Kit**: Database migration and introspection tools\n- **User Preferences**: Persistent storage for delivery method preferences per user\n\n### Backend Framework\n- **Express.js**: Web application framework for the REST API\n- **Connect PG Simple**: PostgreSQL session store for Express sessions\n- **tsx**: TypeScript execution environment for development\n\n### Utility Libraries\n- **date-fns**: Date manipulation and formatting\n- **clsx**: Conditional CSS class name utility\n- **class-variance-authority**: CSS variant management for component styling\n- **nanoid**: Unique ID generation","size_bytes":4809},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"python/kumo_predictions.py":{"content":"#!/usr/bin/env python3\n\"\"\"\nKumo AI RFM Integration for Smart Grocer\nUses kumoai.experimental.rfm for simplified predictive queries\n\"\"\"\n\nimport pandas as pd\nimport json\nimport sys\nimport os\nimport contextlib\nimport warnings\nfrom typing import Dict, List, Any\n\n# Import Kumo AI RFM module\ntry:\n    import kumoai.experimental.rfm as rfm\n    KUMO_AVAILABLE = True\nexcept ImportError:\n    KUMO_AVAILABLE = False\n    print(\"Warning: Kumo AI SDK not installed. Run: pip install kumoai\",\n          file=sys.stderr)\n\n\nclass SmartGrocerPredictor:\n\n    def __init__(self, data_dir: str = \"client/src/data\"):\n        self.data_dir = data_dir\n        self.graph = None\n        self.model = None\n        self.users_df = None\n        self.products_df = None\n        self.orders_df = None\n        self.order_items_df = None\n\n        # Initialize Kumo RFM if available\n        if KUMO_AVAILABLE:\n            self.kumo_api_key = os.getenv('KUMO_API_KEY', \"\")\n            try:\n                # Suppress RFM output to keep JSON clean\n                warnings.filterwarnings(\"ignore\")\n                rfm.init()\n                print(\"Kumo AI RFM initialized successfully\", file=sys.stderr)\n            except Exception as e:\n                print(f\"Kumo RFM initialization issue: {e}\", file=sys.stderr)\n        \n        # Will store average quantities per product\n        self.avg_quantities = {}\n\n    def load_csv_data(self):\n        \"\"\"Load all CSV data required for RFM model\"\"\"\n        try:\n            # Load all required CSV files\n            self.users_df = pd.read_csv(\n                os.path.join(self.data_dir, \"users.csv\"))\n            self.products_df = pd.read_csv(\n                os.path.join(self.data_dir, \"products.csv\"))\n            self.orders_df = pd.read_csv(\n                os.path.join(self.data_dir, \"orders.csv\"))\n            self.order_items_df = pd.read_csv(\n                os.path.join(self.data_dir, \"order_items.csv\"))\n\n            # Prepare orders data with days_since_today\n            today = pd.Timestamp.today()\n            self.orders_df[\"days_since_today\"] = (today - pd.to_datetime(\n                self.orders_df[\"order_timestamp\"])).dt.days.abs()\n\n            # Create order_items join as required by RFM\n            self.order_items_join = self.orders_df.merge(self.order_items_df)\n\n            # Calculate average quantities per product across all orders\n            self.avg_quantities = self.order_items_df.groupby('product_id')['quantity'].mean().round().astype(int).to_dict()\n            \n            print(\n                f\"Loaded {len(self.users_df)} users, {len(self.products_df)} products, {len(self.orders_df)} orders\",\n                file=sys.stderr)\n            print(f\"Calculated average quantities for {len(self.avg_quantities)} products\", file=sys.stderr)\n            return True\n        except Exception as e:\n            print(f\"Error loading CSV data: {e}\", file=sys.stderr)\n            return False\n\n    def create_kumo_graph(self):\n        \"\"\"Create LocalGraph using RFM module\"\"\"\n        if not KUMO_AVAILABLE:\n            return False\n\n        try:\n            # Redirect stdout to stderr temporarily to avoid JSON pollution\n\n            with contextlib.redirect_stdout(sys.stderr):\n                # Create graph using RFM LocalGraph.from_data\n                self.graph = rfm.LocalGraph.from_data({\n                    \"users\":\n                    self.users_df,\n                    \"products\":\n                    self.products_df,\n                    \"orders\":\n                    self.orders_df,\n                    \"order_items\":\n                    self.order_items_join,\n                })\n\n                # Initialize KumoRFM model\n                self.model = rfm.KumoRFM(self.graph)\n\n            print(\"Kumo RFM graph and model created successfully\",\n                  file=sys.stderr)\n            return True\n\n        except Exception as e:\n            print(f\"Error creating Kumo RFM graph: {e}\", file=sys.stderr)\n            return False\n\n    def predict_cart_items(self,\n                           user_id: int,\n                           num_predictions: int = 5) -> List[Dict]:\n        \"\"\"Predict cart items using Kumo RFM model\"\"\"\n        if self.model and KUMO_AVAILABLE:\n            try:\n                # First, predict how many items user will buy in next 10 days\n                quantity_query = f\"PREDICT SUM(order_items.quantity, 0, 10, days) \" + \\\n                               f\"FOR users.user_id = {user_id}\"\n\n                try:\n                    with contextlib.redirect_stdout(sys.stderr):\n                        quantity_result = self.model.predict(quantity_query)\n                        number_products = int(\n                            quantity_result.TARGET_PRED.values[0])\n                except:\n                    number_products = 20\n\n                # Forecast product demand for next 30 days\n                products_query = f\"PREDICT LIST_DISTINCT(order_items.product_id, 0, 30, days) RANK TOP {min(num_predictions, number_products)} \" + \\\n                               f\"FOR users.user_id = {user_id}\"\n\n                with contextlib.redirect_stdout(sys.stderr):\n                    prediction_result = self.model.predict(products_query)\n                recommended_product_ids = prediction_result.CLASS\n\n                # Convert to our expected format\n                predictions = []\n                for i, product_id in enumerate(recommended_product_ids):\n                    product_row = self.products_df[\n                        self.products_df['product_id'] == product_id]\n                    if not product_row.empty:\n                        product = product_row.iloc[0]\n\n                        # Use average quantity from historical data\n                        quantity = self.avg_quantities.get(product_id, 1)\n\n                        predictions.append({\n                            \"product_id\":\n                            int(product_id),\n                            \"product_name\":\n                            str(product['product_name']),\n                            \"brand\":\n                            str(product['brand']),\n                            \"category\":\n                            str(product['category']),\n                            \"size\":\n                            str(product['size']),\n                            \"unit\":\n                            str(product['unit']),\n                            \"quantity\":\n                            quantity,\n                            \"price_per_unit\":\n                            float(product['price_per_unit']),\n                            \"confidence\":\n                            0.95,  # High confidence for RFM predictions\n                            \"reason\":\n                            f\"Kumo RFM prediction: average quantity {quantity} based on historical orders\"\n                        })\n\n                print(\n                    f\"Kumo RFM returned {len(predictions)} cart predictions for user {user_id}\",\n                    file=sys.stderr)\n                return predictions\n\n            except Exception as e:\n                print(f\"Kumo RFM prediction failed, using fallback: {e}\",\n                      file=sys.stderr)\n                return self._fallback_predictions(user_id, num_predictions)\n        else:\n            return self._fallback_predictions(user_id, num_predictions)\n\n    def predict_recommendations(self,\n                                user_id: int,\n                                num_recommendations: int = 8) -> List[Dict]:\n        \"\"\"Predict product recommendations using Kumo RFM model\"\"\"\n        if self.model and KUMO_AVAILABLE:\n            try:\n                # Predict broader recommendations for next 60 days\n                recommendations_query = f\"PREDICT LIST_DISTINCT(order_items.product_id, 0, 60, days) RANK TOP {num_recommendations} \" + \\\n                                      f\"FOR users.user_id = {user_id}\"\n\n                with contextlib.redirect_stdout(sys.stderr):\n                    prediction_result = self.model.predict(\n                        recommendations_query)\n                recommended_product_ids = prediction_result.CLASS\n\n                # Convert to our expected format\n                recommendations = []\n                for i, product_id in enumerate(recommended_product_ids):\n                    product_row = self.products_df[\n                        self.products_df['product_id'] == product_id]\n                    if not product_row.empty:\n                        product = product_row.iloc[0]\n\n                        recommendations.append({\n                            \"product_id\":\n                            int(product_id),\n                            \"product_name\":\n                            str(product['product_name']),\n                            \"brand\":\n                            str(product['brand']),\n                            \"category\":\n                            str(product['category']),\n                            \"size\":\n                            str(product['size']),\n                            \"unit\":\n                            str(product['unit']),\n                            \"price_per_unit\":\n                            float(product['price_per_unit']),\n                            \"confidence\":\n                            0.9,  # High confidence for RFM recommendations\n                            \"reason\":\n                            f\"Kumo RFM recommendation: predicted interest over 60 days\"\n                        })\n\n                print(\n                    f\"Kumo RFM returned {len(recommendations)} recommendations for user {user_id}\",\n                    file=sys.stderr)\n                return recommendations\n\n            except Exception as e:\n                print(f\"Kumo RFM recommendation failed, using fallback: {e}\",\n                      file=sys.stderr)\n                return self._fallback_recommendations(user_id,\n                                                      num_recommendations)\n        else:\n            return self._fallback_recommendations(user_id, num_recommendations)\n\n    def predict_delivery_times(self, user_id: int, num_slots: int = 3, timezone: str = 'UTC') -> List[Dict]:\n        \"\"\"Predict top delivery time slots for a user using KumoRFM\"\"\"\n        if self.model and KUMO_AVAILABLE:\n            try:\n                # Create the prediction query\n                query = f\"PREDICT LIST_DISTINCT(orders.delivery_window, 0, 30, days) RANK TOP {num_slots} \"\\\n                        f\"FOR users.user_id = {user_id}\"\n                \n                # Execute prediction\n                with contextlib.redirect_stdout(sys.stderr):\n                    prediction_result = self.model.predict(query)\n                \n                if prediction_result is None or prediction_result.empty:\n                    return self._fallback_delivery_times(user_id, num_slots, timezone)\n                \n                # Process results and determine today/tomorrow\n                from datetime import datetime, timedelta\n                import pytz\n                \n                # Get current time in user's timezone\n                if timezone != 'UTC':\n                    try:\n                        user_tz = pytz.timezone(timezone)\n                        current_time = datetime.now(user_tz)\n                    except pytz.exceptions.UnknownTimeZoneError:\n                        print(f\"Unknown timezone {timezone}, using UTC\", file=sys.stderr)\n                        current_time = datetime.now()\n                else:\n                    current_time = datetime.now()\n                processed_slots = []\n                \n                for _, row in prediction_result.iterrows():\n                    time_window = str(row.get('delivery_window', ''))\n                    if not time_window or time_window == 'nan':\n                        continue\n                        \n                    # Parse time window (e.g., \"9am-11am\")\n                    try:\n                        start_time_str = time_window.split('-')[0].strip()\n                        \n                        # Convert to 24-hour format\n                        if 'pm' in start_time_str.lower() and not start_time_str.startswith('12'):\n                            hour = int(start_time_str.replace('pm', '').replace('am', '')) + 12\n                        elif 'am' in start_time_str.lower() and start_time_str.startswith('12'):\n                            hour = 0\n                        else:\n                            hour = int(start_time_str.replace('pm', '').replace('am', ''))\n                        \n                        # Determine if slot is for today or tomorrow\n                        # If current time is past the start of the window, use tomorrow\n                        # Add 30 minute buffer - if we're within 30 mins of start time, use tomorrow\n                        if current_time.hour > hour or (current_time.hour == hour and current_time.minute >= 30):\n                            # Current time is past this slot, so it's for tomorrow\n                            slot_date = \"Tomorrow\"\n                            actual_date = current_time + timedelta(days=1)\n                        else:\n                            # Current time is before this slot, so it's for today\n                            slot_date = \"Today\"\n                            actual_date = current_time\n                        \n                        processed_slots.append({\n                            'time_window': time_window,\n                            'date_label': slot_date,\n                            'full_datetime': actual_date.replace(hour=hour, minute=0).isoformat(),\n                            'score': float(row.get('score', 0.5))\n                        })\n                        \n                    except (ValueError, IndexError) as e:\n                        print(f\"Error parsing time window '{time_window}': {e}\", file=sys.stderr)\n                        continue\n                \n                # Sort by score (highest first) and return top slots\n                processed_slots.sort(key=lambda x: x['score'], reverse=True)\n                result = processed_slots[:num_slots]\n                \n                print(f\"Kumo RFM returned {len(result)} delivery time predictions for user {user_id}\", file=sys.stderr)\n                return result\n                \n            except Exception as e:\n                print(f\"Kumo RFM delivery time prediction failed, using fallback: {e}\", file=sys.stderr)\n                return self._fallback_delivery_times(user_id, num_slots, timezone)\n        else:\n            return self._fallback_delivery_times(user_id, num_slots, timezone)\n\n    def _fallback_predictions(self, user_id: int,\n                              num_predictions: int) -> List[Dict]:\n        \"\"\"Enhanced fallback predictions when Kumo RFM is not available\"\"\"\n        if self.users_df is None or self.products_df is None:\n            return []\n\n        user_row = self.users_df[self.users_df['user_id'] == user_id]\n        if user_row.empty:\n            return []\n\n        user = user_row.iloc[0]\n        dietary_pref = user['dietary_preference']\n        household_size = user['household_size']\n\n        # Smart filtering based on user profile\n        suitable_products = self.products_df.copy()\n\n        # Dietary preference filtering\n        if dietary_pref == 'vegetarian':\n            suitable_products = suitable_products[suitable_products['category']\n                                                  == 'Produce']\n\n        # Sort by price preference\n        if household_size > 2:\n            suitable_products = suitable_products.sort_values('price_per_unit')\n        else:\n            suitable_products = suitable_products.sort_values('price_per_unit',\n                                                              ascending=False)\n\n        predictions = []\n        for i, (_, product) in enumerate(\n                suitable_products.head(num_predictions).iterrows()):\n            confidence = 0.8 if dietary_pref == 'vegetarian' and product[\n                'category'] == 'Produce' else 0.7\n\n            predictions.append({\n                \"product_id\":\n                int(product['product_id']),\n                \"product_name\":\n                str(product['product_name']),\n                \"brand\":\n                str(product['brand']),\n                \"category\":\n                str(product['category']),\n                \"size\":\n                str(product['size']),\n                \"unit\":\n                str(product['unit']),\n                \"quantity\":\n                self.avg_quantities.get(int(product['product_id']), 1),\n                \"price_per_unit\":\n                float(product['price_per_unit']),\n                \"confidence\":\n                float(confidence),\n                \"reason\":\n                f\"Enhanced fallback: matches {dietary_pref} diet, avg quantity from orders\"\n            })\n\n        return predictions\n\n    def _fallback_recommendations(self, user_id: int,\n                                  num_recommendations: int) -> List[Dict]:\n        \"\"\"Enhanced fallback recommendations when Kumo RFM is not available\"\"\"\n        if self.users_df is None or self.products_df is None:\n            return []\n\n        user_row = self.users_df[self.users_df['user_id'] == user_id]\n        if user_row.empty:\n            return []\n\n        user = user_row.iloc[0]\n        dietary_pref = user['dietary_preference']\n\n        # Get diverse product recommendations\n        suitable_products = self.products_df.copy()\n        if dietary_pref == 'vegetarian':\n            suitable_products = suitable_products[suitable_products['category']\n                                                  == 'Produce']\n\n        recommendations = []\n        for i, (_, product) in enumerate(\n                suitable_products.head(num_recommendations).iterrows()):\n            recommendations.append({\n                \"product_id\":\n                int(product['product_id']),\n                \"product_name\":\n                str(product['product_name']),\n                \"brand\":\n                str(product['brand']),\n                \"category\":\n                str(product['category']),\n                \"size\":\n                str(product['size']),\n                \"unit\":\n                str(product['unit']),\n                \"price_per_unit\":\n                float(product['price_per_unit']),\n                \"confidence\":\n                0.75,\n                \"reason\":\n                f\"Enhanced fallback: suitable for {dietary_pref} preference\"\n            })\n\n        return recommendations\n\n    def _fallback_delivery_times(self, user_id: int, num_slots: int = 3, timezone: str = 'UTC') -> List[Dict]:\n        \"\"\"Fallback delivery times when Kumo RFM is not available\"\"\"\n        from datetime import datetime, timedelta\n        import pytz\n        \n        # Common delivery time slots\n        default_slots = [\"9am-11am\", \"11am-1pm\", \"1pm-3pm\", \"3pm-5pm\", \"5pm-7pm\"]\n        \n        # Get current time in user's timezone\n        if timezone != 'UTC':\n            try:\n                user_tz = pytz.timezone(timezone)\n                current_time = datetime.now(user_tz)\n            except pytz.exceptions.UnknownTimeZoneError:\n                print(f\"Unknown timezone {timezone}, using UTC\", file=sys.stderr)\n                current_time = datetime.now()\n        else:\n            current_time = datetime.now()\n        processed_slots = []\n        \n        for i, time_window in enumerate(default_slots[:num_slots]):\n            try:\n                start_time_str = time_window.split('-')[0].strip()\n                \n                # Convert to 24-hour format\n                if 'pm' in start_time_str.lower() and not start_time_str.startswith('12'):\n                    hour = int(start_time_str.replace('pm', '').replace('am', '')) + 12\n                elif 'am' in start_time_str.lower() and start_time_str.startswith('12'):\n                    hour = 0\n                else:\n                    hour = int(start_time_str.replace('pm', '').replace('am', ''))\n                \n                # Determine if slot is for today or tomorrow\n                # If current time is past the start of the window, use tomorrow\n                # Add 30 minute buffer - if we're within 30 mins of start time, use tomorrow\n                if current_time.hour > hour or (current_time.hour == hour and current_time.minute >= 30):\n                    slot_date = \"Tomorrow\"\n                    actual_date = current_time + timedelta(days=1)\n                else:\n                    slot_date = \"Today\"\n                    actual_date = current_time\n                \n                processed_slots.append({\n                    'time_window': time_window,\n                    'date_label': slot_date,\n                    'full_datetime': actual_date.replace(hour=hour, minute=0).isoformat(),\n                    'score': 0.7 - (i * 0.1)  # Decreasing preference score\n                })\n                \n            except (ValueError, IndexError):\n                continue\n        \n        return processed_slots\n\n    def get_product_substitution_rate(self, product_id: int) -> float:\n        \"\"\"Calculate average substitution rate for a product from order_items data\"\"\"\n        try:\n            if self.order_items_df is None:\n                # Generate realistic substitution rates when no data available\n                import random\n                random.seed(product_id)  # Deterministic based on product_id\n                \n                # Most products should have low substitution rates (under 8%)\n                if random.random() < 0.75:  # 75% of products have very low substitution rates\n                    return round(random.uniform(0.01, 0.06), 3)  # 1-6%\n                elif random.random() < 0.9:  # 15% have medium rates\n                    return round(random.uniform(0.08, 0.15), 3)  # 8-15%\n                else:  # 10% have higher rates\n                    return round(random.uniform(0.16, 0.30), 3)  # 16-30%\n            \n            # Filter orders for this specific product\n            product_orders = self.order_items_df[self.order_items_df['product_id'] == product_id]\n            \n            if product_orders.empty:\n                # Generate realistic low substitution rates for most products\n                # Use product_id to create deterministic but varied rates\n                import random\n                random.seed(product_id)  # Deterministic based on product_id\n                \n                # Most products should have low substitution rates (under 8%)\n                if random.random() < 0.7:  # 70% of products have very low substitution rates\n                    return round(random.uniform(0.01, 0.07), 3)  # 1-7%\n                elif random.random() < 0.9:  # 20% have medium rates\n                    return round(random.uniform(0.08, 0.15), 3)  # 8-15%\n                else:  # 10% have higher rates\n                    return round(random.uniform(0.16, 0.35), 3)  # 16-35%\n            \n            # Calculate substitution rate based on 'substituted' column\n            if 'substituted' in product_orders.columns:\n                substitution_rate = product_orders['substituted'].mean()\n                return float(substitution_rate)\n            else:\n                # If no substituted column, generate realistic rates based on product characteristics\n                import random\n                random.seed(product_id)  # Deterministic based on product_id\n                \n                if self.products_df is not None:\n                    product_row = self.products_df[self.products_df['product_id'] == product_id]\n                    if not product_row.empty:\n                        price = product_row.iloc[0]['price_per_unit']\n                        category = product_row.iloc[0].get('category', 'Unknown')\n                        \n                        # More expensive products tend to have lower substitution rates\n                        if price > 10:\n                            # Expensive items: mostly low substitution rates\n                            if random.random() < 0.8:\n                                return round(random.uniform(0.01, 0.06), 3)  # 1-6%\n                            else:\n                                return round(random.uniform(0.07, 0.12), 3)  # 7-12%\n                        elif price > 5:\n                            # Medium-priced items: some can have higher rates\n                            if random.random() < 0.6:\n                                return round(random.uniform(0.01, 0.07), 3)  # 1-7%\n                            elif random.random() < 0.85:\n                                return round(random.uniform(0.08, 0.18), 3)  # 8-18%\n                            else:\n                                return round(random.uniform(0.19, 0.30), 3)  # 19-30%\n                        else:\n                            # Cheaper items: more variation, some high substitution rates\n                            if random.random() < 0.5:\n                                return round(random.uniform(0.01, 0.07), 3)  # 1-7%\n                            elif random.random() < 0.75:\n                                return round(random.uniform(0.08, 0.20), 3)  # 8-20%\n                            else:\n                                return round(random.uniform(0.21, 0.40), 3)  # 21-40%\n                \n                # Final fallback - low rate\n                return round(random.uniform(0.01, 0.05), 3)  # 1-5%\n                \n        except Exception as e:\n            print(f\"Error calculating substitution rate for product {product_id}: {e}\", file=sys.stderr)\n            # Even in error case, return a low rate\n            import random\n            random.seed(product_id)\n            return round(random.uniform(0.01, 0.05), 3)  # 1-5%\n\n\ndef main():\n    \"\"\"Main function to handle command line interface\"\"\"\n    if len(sys.argv) < 3:\n        print(\n            \"Usage: python kumo_predictions.py [cart|recommendations] <user_id> [num_items]\"\n        )\n        sys.exit(1)\n\n    prediction_type = sys.argv[1]\n    user_id = int(sys.argv[2])\n    num_items = int(sys.argv[3]) if len(sys.argv) > 3 else 5\n\n    # Initialize predictor and load data\n    predictor = SmartGrocerPredictor()\n\n    if not predictor.load_csv_data():\n        sys.exit(1)\n\n    # Create Kumo graph if possible\n    predictor.create_kumo_graph()\n\n    # Make predictions\n    if prediction_type == \"cart\":\n        predictions = predictor.predict_cart_items(user_id, num_items)\n    elif prediction_type == \"recommendations\":\n        predictions = predictor.predict_recommendations(user_id, num_items)\n    elif prediction_type == \"delivery-times\":\n        timezone = sys.argv[4] if len(sys.argv) > 4 else 'UTC'\n        predictions = predictor.predict_delivery_times(user_id, num_items, timezone)\n    elif prediction_type == \"substitution-rate\":\n        # For substitution rate, user_id is actually product_id\n        substitution_rate = predictor.get_product_substitution_rate(user_id)\n        print(substitution_rate)\n        return\n    else:\n        print(\"Invalid prediction type. Use 'cart', 'recommendations', 'delivery-times', or 'substitution-rate'\")\n        sys.exit(1)\n\n    # Output results as JSON\n    print(json.dumps(predictions, indent=2))\n\n\nif __name__ == \"__main__\":\n    main()\n","size_bytes":27498},"server/aiService.ts":{"content":"import { spawn } from 'child_process';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nexport interface CartPrediction {\n  product_id: number;\n  product_name: string;\n  quantity: number;\n  price_per_unit: number;\n  confidence: number;\n  reason?: string;\n}\n\nexport interface ProductRecommendation {\n  product_id: number;\n  product_name: string;\n  category: string;\n  brand: string;\n  size: string;\n  unit: string;\n  price_per_unit: number;\n  confidence: number;\n}\n\nexport class AIService {\n  private pythonPath: string;\n  private scriptPath: string;\n\n  constructor() {\n    this.pythonPath = 'python'; // Use 'python' for Replit\n    this.scriptPath = path.join(__dirname, '../python/kumo_predictions.py');\n  }\n\n  async predictCartItems(userId: number, numItems: number = 5): Promise<CartPrediction[]> {\n    try {\n      const result = await this.runPythonScript('cart', userId.toString(), numItems.toString());\n      return JSON.parse(result) as CartPrediction[];\n    } catch (error) {\n      console.error('Error predicting cart items:', error);\n      return [];\n    }\n  }\n\n  async predictRecommendations(userId: number, numItems: number = 3): Promise<ProductRecommendation[]> {\n    try {\n      const result = await this.runPythonScript('recommendations', userId.toString(), numItems.toString());\n      return JSON.parse(result) as ProductRecommendation[];\n    } catch (error) {\n      console.error('Error predicting recommendations:', error);\n      return [];\n    }\n  }\n\n  async predictDeliveryTimes(userId: number, timezone: string = 'UTC', numSlots: number = 3): Promise<any[]> {\n    try {\n      const result = await this.runPythonScript('delivery-times', userId.toString(), numSlots.toString(), timezone);\n      return JSON.parse(result);\n    } catch (error) {\n      console.error('Error predicting delivery times:', error);\n      return [];\n    }\n  }\n\n  async getProductSubstitutionRate(productId: number): Promise<number> {\n    try {\n      const result = await this.runPythonScript('substitution-rate', productId.toString(), '1');\n      return parseFloat(result.trim());\n    } catch (error) {\n      console.error('Error getting substitution rate:', error);\n      return 0.5; // Default 50% substitution rate\n    }\n  }\n\n  private runPythonScript(command: string, userId: string, numItems: string, timezone?: string): Promise<string> {\n    return new Promise((resolve, reject) => {\n      // Set the working directory to the project root so Python can find CSV files\n      const options = {\n        cwd: path.join(__dirname, '..')\n      };\n      \n      const args = [this.scriptPath, command, userId, numItems];\n      if (timezone) {\n        args.push(timezone);\n      }\n      \n      const python = spawn(this.pythonPath, args, options);\n      \n      let stdout = '';\n      let stderr = '';\n\n      python.stdout.on('data', (data) => {\n        stdout += data.toString();\n      });\n\n      python.stderr.on('data', (data) => {\n        stderr += data.toString();\n      });\n\n      python.on('close', (code) => {\n        if (code === 0) {\n          resolve(stdout.trim());\n        } else {\n          reject(new Error(`Python script failed with code ${code}: ${stderr}`));\n        }\n      });\n\n      python.on('error', (error) => {\n        reject(new Error(`Failed to start Python script: ${error.message}`));\n      });\n    });\n  }\n\n  async initializeGraph(): Promise<boolean> {\n    try {\n      // Run a test command to initialize the graph\n      await this.runPythonScript('cart', '1', '1');\n      console.log('Kumo graph initialized successfully');\n      return true;\n    } catch (error) {\n      console.error('Failed to initialize Kumo graph:', error);\n      return false;\n    }\n  }\n}\n\nexport const aiService = new AIService();","size_bytes":3834},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { aiService } from \"./aiService\";\nimport { generateRecipesFromCart } from \"./recipeService\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Initialize Kumo AI graph on startup\n  console.log('Initializing Kumo AI graph...');\n  await aiService.initializeGraph();\n\n  // AI Prediction Routes\n  app.get('/api/predict/cart/:userId', async (req, res) => {\n    try {\n      const userId = parseInt(req.params.userId);\n      const numItems = parseInt(req.query.numItems as string) || 5;\n      \n      const predictions = await aiService.predictCartItems(userId, numItems);\n      res.json(predictions);\n    } catch (error) {\n      console.error('Cart prediction error:', error);\n      res.status(500).json({ error: 'Failed to predict cart items' });\n    }\n  });\n\n  app.get('/api/predict/recommendations/:userId', async (req, res) => {\n    try {\n      const userId = parseInt(req.params.userId);\n      const numItems = parseInt(req.query.numItems as string) || 3;\n      \n      const recommendations = await aiService.predictRecommendations(userId, numItems);\n      res.json(recommendations);\n    } catch (error) {\n      console.error('Recommendation prediction error:', error);\n      res.status(500).json({ error: 'Failed to predict recommendations' });\n    }\n  });\n\n  // Health check for AI service\n  app.get('/api/ai/health', async (req, res) => {\n    try {\n      const isHealthy = await aiService.initializeGraph();\n      res.json({ \n        status: isHealthy ? 'healthy' : 'degraded',\n        kumoAvailable: isHealthy,\n        timestamp: new Date().toISOString()\n      });\n    } catch (error: any) {\n      res.status(500).json({ \n        status: 'unhealthy',\n        error: error.message,\n        timestamp: new Date().toISOString()\n      });\n    }\n  });\n\n  // Recipe generation route\n  app.post('/api/recipes/generate', async (req, res) => {\n    try {\n      const { cartItems, userId } = req.body;\n      \n      if (!cartItems || !Array.isArray(cartItems)) {\n        return res.status(400).json({ error: 'Cart items are required' });\n      }\n      \n      if (!userId) {\n        return res.status(400).json({ error: 'User ID is required for personalization' });\n      }\n\n      const recipes = await generateRecipesFromCart(cartItems, userId);\n      res.json({ recipes });\n    } catch (error) {\n      console.error('Recipe generation error:', error);\n      res.status(500).json({ error: 'Failed to generate recipes' });\n    }\n  });\n\n  // Product substitution rates route\n  app.get('/api/product/:productId/substitution-rate', async (req, res) => {\n    try {\n      const productId = parseInt(req.params.productId);\n      if (isNaN(productId)) {\n        return res.status(400).json({ error: 'Invalid product ID' });\n      }\n      \n      const substitutionRate = await aiService.getProductSubstitutionRate(productId);\n      res.json({ productId, substitutionRate });\n    } catch (error: any) {\n      console.error('Substitution rate error:', error);\n      res.status(500).json({ error: 'Failed to get substitution rate' });\n    }\n  });\n\n  // Delivery time prediction route\n  app.get('/api/predict/delivery-times/:userId', async (req, res) => {\n    try {\n      const userId = parseInt(req.params.userId);\n      if (isNaN(userId)) {\n        return res.status(400).json({ error: 'Invalid user ID' });\n      }\n      \n      const userTimezone = req.query.timezone as string || 'UTC';\n      const predictions = await aiService.predictDeliveryTimes(userId, userTimezone);\n      res.json(predictions);\n    } catch (error: any) {\n      console.error('Delivery time prediction error:', error);\n      res.status(500).json({ error: 'Failed to predict delivery times' });\n    }\n  });\n\n  // User delivery preference routes\n  app.get('/api/user/:userId/delivery-preference', async (req, res) => {\n    try {\n      const userId = parseInt(req.params.userId);\n      if (isNaN(userId)) {\n        return res.status(400).json({ error: 'Invalid user ID' });\n      }\n      \n      const lastMethod = await storage.getUserLastDeliveryMethod(userId);\n      res.json({ deliveryMethod: lastMethod || 'delivery' }); // Default to delivery\n    } catch (error) {\n      console.error('Get delivery preference error:', error);\n      res.status(500).json({ error: 'Failed to get delivery preference' });\n    }\n  });\n\n  app.post('/api/user/:userId/delivery-preference', async (req, res) => {\n    try {\n      const userId = parseInt(req.params.userId);\n      const { deliveryMethod } = req.body;\n      \n      if (isNaN(userId)) {\n        return res.status(400).json({ error: 'Invalid user ID' });\n      }\n      \n      if (!deliveryMethod || !['delivery', 'pickup'].includes(deliveryMethod)) {\n        return res.status(400).json({ error: 'Invalid delivery method' });\n      }\n      \n      await storage.updateUserDeliveryMethod(userId, deliveryMethod);\n      res.json({ success: true });\n    } catch (error) {\n      console.error('Update delivery preference error:', error);\n      res.status(500).json({ error: 'Failed to update delivery preference' });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":5243},"server/storage.ts":{"content":"import { type User, type InsertUser } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport { db } from \"./db\";\nimport { userPreferences, type InsertUserPreferences } from \"@shared/schema\";\nimport { eq, desc } from \"drizzle-orm\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  // User preference methods\n  getUserLastDeliveryMethod(userId: number): Promise<string | null>;\n  updateUserDeliveryMethod(userId: number, deliveryMethod: string): Promise<void>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n\n  constructor() {\n    this.users = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async getUserLastDeliveryMethod(userId: number): Promise<string | null> {\n    try {\n      const [preference] = await db\n        .select()\n        .from(userPreferences)\n        .where(eq(userPreferences.user_id, userId))\n        .orderBy(desc(userPreferences.updated_at))\n        .limit(1);\n      \n      return preference?.last_delivery_method || null;\n    } catch (error) {\n      console.error('Failed to get user delivery preference:', error);\n      return null;\n    }\n  }\n\n  async updateUserDeliveryMethod(userId: number, deliveryMethod: string): Promise<void> {\n    try {\n      const now = new Date().toISOString();\n      \n      // Check if user already has a preference record\n      const [existing] = await db\n        .select()\n        .from(userPreferences)\n        .where(eq(userPreferences.user_id, userId))\n        .limit(1);\n\n      if (existing) {\n        // Update existing preference\n        await db\n          .update(userPreferences)\n          .set({\n            last_delivery_method: deliveryMethod,\n            updated_at: now,\n          })\n          .where(eq(userPreferences.user_id, userId));\n      } else {\n        // Insert new preference\n        await db.insert(userPreferences).values({\n          user_id: userId,\n          last_delivery_method: deliveryMethod,\n          updated_at: now,\n        });\n      }\n    } catch (error) {\n      console.error('Failed to update user delivery preference:', error);\n    }\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":2761},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, decimal, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  user_id: integer(\"user_id\").primaryKey(),\n  household_size: integer(\"household_size\").notNull(),\n  dietary_preference: text(\"dietary_preference\").notNull(),\n  primary_shopping_day: text(\"primary_shopping_day\").notNull(),\n});\n\nexport const products = pgTable(\"products\", {\n  product_id: integer(\"product_id\").primaryKey(),\n  product_name: text(\"product_name\").notNull(),\n  category: text(\"category\").notNull(),\n  brand: text(\"brand\").notNull(),\n  size: text(\"size\").notNull(),\n  unit: text(\"unit\").notNull(),\n  price_per_unit: decimal(\"price_per_unit\", { precision: 10, scale: 2 }).notNull(),\n});\n\nexport const cartItems = pgTable(\"cart_items\", {\n  id: integer(\"id\").primaryKey(),\n  productId: integer(\"product_id\").notNull(),\n  quantity: integer(\"quantity\").notNull().default(1),\n  name: text(\"name\").notNull(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n});\n\nexport const recipes = pgTable(\"recipes\", {\n  id: integer(\"id\").primaryKey(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  missingItems: text(\"missing_items\").array(),\n});\n\nexport const userPreferences = pgTable(\"user_preferences\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  user_id: integer(\"user_id\").notNull(),\n  last_delivery_method: text(\"last_delivery_method\").notNull(), // \"delivery\" or \"pickup\"\n  updated_at: text(\"updated_at\").notNull().default(sql`NOW()`),\n});\n\nexport const insertUserSchema = createInsertSchema(users);\n\nexport const insertProductSchema = createInsertSchema(products);\n\nexport const insertCartItemSchema = createInsertSchema(cartItems);\n\nexport const insertRecipeSchema = createInsertSchema(recipes);\n\nexport const insertUserPreferencesSchema = createInsertSchema(userPreferences).omit({ id: true, updated_at: true });\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type Product = typeof products.$inferSelect;\nexport type InsertCartItem = z.infer<typeof insertCartItemSchema>;\nexport type CartItem = typeof cartItems.$inferSelect;\nexport type InsertRecipe = z.infer<typeof insertRecipeSchema>;\nexport type Recipe = typeof recipes.$inferSelect;\nexport type InsertUserPreferences = z.infer<typeof insertUserPreferencesSchema>;\nexport type UserPreferences = typeof userPreferences.$inferSelect;\n","size_bytes":2631},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AppProvider } from \"@/contexts/AppContext\";\nimport Home from \"@/pages/Home\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <AppProvider>\n          <Toaster />\n          <Router />\n        </AppProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":801},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(157.5 70.7% 28.6%);\n  --primary-dark: hsl(158.2 64.4% 23.5%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(157.3 47.1% 51.4%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(37.7 92.1% 50.2%);\n  --accent-foreground: hsl(0 0% 100%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Inter, Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n  --surface: hsl(0 0% 100%);\n  --surface-foreground: hsl(210 25% 7.8431%);\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(157.5 70.7% 28.6%);\n  --primary-dark: hsl(158.2 64.4% 23.5%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(37.7 92.1% 50.2%);\n  --accent-foreground: hsl(0 0% 100%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Inter, Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --surface: hsl(228 9.8039% 10%);\n  --surface-foreground: hsl(0 0% 85.0980%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/* Custom styles for Smart Grocer */\n.bg-surface {\n  background-color: var(--surface);\n}\n\n.text-surface-foreground {\n  color: var(--surface-foreground);\n}\n\n.bg-primary-dark {\n  background-color: var(--primary-dark);\n}\n\n.hover\\:bg-primary-dark:hover {\n  background-color: var(--primary-dark);\n}\n\n.text-primary-dark {\n  color: var(--primary-dark);\n}\n\n.hover\\:text-primary-dark:hover {\n  color: var(--primary-dark);\n}\n","size_bytes":5660},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/CartItem.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Label } from \"@/components/ui/label\";\nimport { MockCartItem } from \"@/lib/mockApi\";\nimport { Minus, Plus, Trash2, Package } from \"lucide-react\";\nimport { useState, useEffect } from \"react\";\n\ninterface CartItemProps {\n  item: MockCartItem;\n  onQuantityChange: (id: number, quantity: number) => void;\n  onRemove: (id: number) => void;\n  onUpdateSubstitution: (id: number, allowSubstitutions: boolean) => void;\n}\n\nexport const CartItem = ({ item, onQuantityChange, onRemove, onUpdateSubstitution }: CartItemProps) => {\n  const [allowSubstitutions, setAllowSubstitutions] = useState<boolean>(item.allow_substitutions ?? true);\n  const [substitutionRate, setSubstitutionRate] = useState<number | null>(null);\n\n  // Fetch substitution rate for this product\n  useEffect(() => {\n    if (item.product_id) {\n      const fetchSubstitutionRate = async () => {\n        try {\n          const response = await fetch(`/api/product/${item.product_id}/substitution-rate`);\n          if (response.ok) {\n            const data = await response.json();\n            setSubstitutionRate(data.substitutionRate);\n            // Set default based on substitution rate if not already set\n            if (item.allow_substitutions === undefined) {\n              const defaultValue = data.substitutionRate > 0.08;\n              setAllowSubstitutions(defaultValue);\n              onUpdateSubstitution(item.id, defaultValue);\n            }\n          }\n        } catch (error) {\n          console.error('Failed to fetch substitution rate:', error);\n          setSubstitutionRate(0.05); // Default rate - low so substitutions are not enabled by default\n        }\n      };\n\n      fetchSubstitutionRate();\n    }\n  }, [item.product_id, item.allow_substitutions, item.id, onUpdateSubstitution]);\n\n  const handleSubstitutionChange = (checked: boolean) => {\n    setAllowSubstitutions(checked);\n    onUpdateSubstitution(item.id, checked);\n  };\n\n  return (\n    <div className=\"p-4 border border-gray-200 rounded-lg hover:border-gray-300 transition-colors\">\n      <div className=\"flex items-center justify-between mb-3\">\n        <div className=\"flex-1\">\n          <h3 className=\"font-medium text-gray-900\">{item.product_name}</h3>\n          <p className=\"text-xs text-gray-500 mb-1\">{item.brand}</p>\n          <p className=\"text-sm text-gray-600\">${item.price_per_unit.toFixed(2)} each</p>\n        </div>\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"flex items-center border border-gray-300 rounded-lg\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"p-2 hover:bg-gray-100 transition-colors\"\n              onClick={() => onQuantityChange(item.id, item.quantity - 1)}\n            >\n              <Minus className=\"w-3 h-3 text-gray-600\" />\n            </Button>\n            <span className=\"px-3 py-2 text-sm font-medium\">{item.quantity}</span>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"p-2 hover:bg-gray-100 transition-colors\"\n              onClick={() => onQuantityChange(item.id, item.quantity + 1)}\n            >\n              <Plus className=\"w-3 h-3 text-gray-600\" />\n            </Button>\n          </div>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"text-red-500 hover:text-red-700 p-2\"\n            onClick={() => onRemove(item.id)}\n          >\n            <Trash2 className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      </div>\n      \n      {/* Substitution preference - always show, default based on rates */}\n      {substitutionRate !== null && (\n        <div className=\"flex items-center text-xs text-gray-600\">\n          <Checkbox\n            id={`substitution-${item.id}`}\n            checked={allowSubstitutions}\n            onCheckedChange={handleSubstitutionChange}\n            className=\"mr-2\"\n          />\n          <Label htmlFor={`substitution-${item.id}`} className=\"flex items-center cursor-pointer\">\n            <Package className=\"w-3 h-3 mr-1\" />\n            {allowSubstitutions ? \"Allow substitutions\" : \"Do not substitute\"}\n          </Label>\n        </div>\n      )}\n    </div>\n  );\n};\n","size_bytes":4278},"client/src/components/CheckoutView.tsx":{"content":"import { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Label } from \"@/components/ui/label\";\n\nimport { useAppContext } from \"@/contexts/AppContext\";\nimport { CreditCard, Clock, Calendar, Package } from \"lucide-react\";\nimport { useState, useEffect } from \"react\";\n\ninterface CheckoutViewProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport const CheckoutView = ({ open, onOpenChange }: CheckoutViewProps) => {\n  const { cartItems, cartTotal, deliveryPredictions, activeUserID } = useAppContext();\n  const [deliveryMethod, setDeliveryMethod] = useState(deliveryPredictions?.predicted_method || \"delivery\");\n  const [isLoadingPreference, setIsLoadingPreference] = useState(false);\n  const [deliveryTimes, setDeliveryTimes] = useState<any[]>([]);\n  const [selectedTimeSlot, setSelectedTimeSlot] = useState<string>(\"\");\n  const [isLoadingTimes, setIsLoadingTimes] = useState(false);\n\n  \n  const deliveryFee = deliveryMethod === \"delivery\" ? 3.99 : 0;\n  const finalTotal = cartTotal + deliveryFee;\n\n  // Fetch user's last delivery preference and time slots when modal opens\n  useEffect(() => {\n    if (open && activeUserID) {\n      fetchUserDeliveryPreference();\n      fetchDeliveryTimes();\n    }\n  }, [open, activeUserID]);\n\n  const fetchUserDeliveryPreference = async () => {\n    try {\n      setIsLoadingPreference(true);\n      const response = await fetch(`/api/user/${activeUserID}/delivery-preference`);\n      if (response.ok) {\n        const data = await response.json();\n        setDeliveryMethod(data.deliveryMethod);\n      }\n    } catch (error) {\n      console.error('Failed to fetch delivery preference:', error);\n    } finally {\n      setIsLoadingPreference(false);\n    }\n  };\n\n  const updateUserDeliveryPreference = async (method: string) => {\n    try {\n      await fetch(`/api/user/${activeUserID}/delivery-preference`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ deliveryMethod: method }),\n      });\n    } catch (error) {\n      console.error('Failed to update delivery preference:', error);\n    }\n  };\n\n  const fetchDeliveryTimes = async () => {\n    try {\n      setIsLoadingTimes(true);\n      console.log('Fetching delivery times for user:', activeUserID);\n      \n      // Get user's timezone\n      const userTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n      \n      const response = await fetch(`/api/predict/delivery-times/${activeUserID}?timezone=${encodeURIComponent(userTimezone)}`);\n      if (response.ok) {\n        const times = await response.json();\n        console.log('Received delivery times:', times);\n        setDeliveryTimes(times);\n        // Auto-select the first (highest-scored) time slot\n        if (times.length > 0) {\n          setSelectedTimeSlot(`${times[0].date_label}-${times[0].time_window}`);\n        }\n      } else {\n        console.error('Failed to fetch delivery times:', response.status);\n      }\n    } catch (error) {\n      console.error('Failed to fetch delivery times:', error);\n    } finally {\n      console.log('Setting loading to false');\n      setIsLoadingTimes(false);\n    }\n  };\n\n  const handleDeliveryMethodChange = (method: string) => {\n    setDeliveryMethod(method);\n    updateUserDeliveryPreference(method); // Save preference immediately\n  };\n\n  const handleCompleteOrder = () => {\n    // Handle order completion\n    alert(\"Order completed successfully!\");\n    onOpenChange(false);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-4xl\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center\">\n            <CreditCard className=\"w-5 h-5 text-primary mr-2\" />\n            Checkout\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Order Summary */}\n          <div>\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Order Summary</h3>\n            <div className=\"space-y-3 mb-6\">\n              {cartItems.map(item => (\n                <div key={item.id} className=\"border-b border-gray-100 pb-3 mb-3\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-700\">{item.product_name} ({item.quantity}x)</span>\n                    <span className=\"font-medium\">${(item.price_per_unit * item.quantity).toFixed(2)}</span>\n                  </div>\n                  {item.allow_substitutions !== undefined && (\n                    <div className=\"flex items-center mt-1 text-xs text-gray-500\">\n                      <Package className=\"w-3 h-3 mr-1\" />\n                      {item.allow_substitutions ? \"Substitutions allowed\" : \"No substitutions\"}\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n            \n            <div className=\"border-t border-gray-200 pt-4 space-y-2\">\n              <div className=\"flex justify-between items-center\">\n                <span>Subtotal:</span>\n                <span className=\"font-medium\">${cartTotal.toFixed(2)}</span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span>Delivery Fee:</span>\n                <span className=\"font-medium\">${deliveryFee.toFixed(2)}</span>\n              </div>\n              <div className=\"flex justify-between items-center text-lg font-semibold\">\n                <span>Total:</span>\n                <span className=\"text-primary\">${finalTotal.toFixed(2)}</span>\n              </div>\n            </div>\n          </div>\n\n          {/* Delivery Options */}\n          <div>\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Delivery Options</h3>\n            <RadioGroup value={deliveryMethod} onValueChange={handleDeliveryMethodChange} className=\"space-y-3 mb-6\">\n              <div className={`border rounded-lg p-4 ${deliveryMethod === \"delivery\" ? \"border-primary bg-green-50\" : \"border-gray-300\"}`}>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    <RadioGroupItem value=\"delivery\" id=\"delivery\" />\n                    <div>\n                      <Label htmlFor=\"delivery\" className=\"font-medium text-gray-900\">\n                        Delivery\n                        {deliveryPredictions?.predicted_method === \"delivery\" && (\n                          <span className=\"ml-2 bg-primary text-white text-xs px-2 py-1 rounded-full\">\n                            Recommended\n                          </span>\n                        )}\n                      </Label>\n                      <p className=\"text-sm text-gray-600\">\n                        {deliveryPredictions?.predicted_time_window || \"Next available slot\"}\n                      </p>\n                    </div>\n                  </div>\n                  <span className=\"font-medium text-gray-900\">$3.99</span>\n                </div>\n              </div>\n              \n              <div className={`border rounded-lg p-4 ${deliveryMethod === \"pickup\" ? \"border-primary bg-green-50\" : \"border-gray-300\"}`}>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    <RadioGroupItem value=\"pickup\" id=\"pickup\" />\n                    <div>\n                      <Label htmlFor=\"pickup\" className=\"font-medium text-gray-900\">\n                        Pickup\n                        {deliveryPredictions?.predicted_method === \"pickup\" && (\n                          <span className=\"ml-2 bg-primary text-white text-xs px-2 py-1 rounded-full\">\n                            Recommended\n                          </span>\n                        )}\n                      </Label>\n                      <p className=\"text-sm text-gray-600\">Store pickup available</p>\n                    </div>\n                  </div>\n                  <span className=\"font-medium text-gray-900\">Free</span>\n                </div>\n              </div>\n            </RadioGroup>\n\n            {/* Delivery Time Selection */}\n            {deliveryMethod === \"delivery\" && (\n              <div className=\"mt-6\">\n                <h4 className=\"text-md font-medium text-gray-900 mb-3 flex items-center\">\n                  <Clock className=\"w-4 h-4 mr-2\" />\n                  Select Delivery Time\n                </h4>\n                \n                {isLoadingTimes ? (\n                  <div className=\"text-sm text-gray-600\">Loading optimal time slots...</div>\n                ) : (\n                  <div className=\"space-y-2\">\n                    <RadioGroup value={selectedTimeSlot} onValueChange={setSelectedTimeSlot} className=\"space-y-2\">\n                      {deliveryTimes.map((slot, index) => (\n                        <div key={`${slot.date_label}-${slot.time_window}`} \n                             className={`border rounded-lg p-3 ${selectedTimeSlot === `${slot.date_label}-${slot.time_window}` ? \"border-primary bg-green-50\" : \"border-gray-300\"}`}>\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center space-x-3\">\n                              <RadioGroupItem value={`${slot.date_label}-${slot.time_window}`} id={`slot-${index}`} />\n                              <div>\n                                <Label htmlFor={`slot-${index}`} className=\"font-medium text-gray-900 flex items-center\">\n                                  <Calendar className=\"w-3 h-3 mr-1\" />\n                                  {slot.date_label} {slot.time_window}\n                                  {index === 0 && (\n                                    <span className=\"ml-2 bg-primary text-white text-xs px-2 py-1 rounded-full\">\n                                      AI Recommended\n                                    </span>\n                                  )}\n                                </Label>\n                                <p className=\"text-xs text-gray-600\">\n                                  Personalized prediction based on your history\n                                </p>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                    </RadioGroup>\n                    \n                    <Button variant=\"outline\" className=\"w-full mt-3\" disabled>\n                      Choose another delivery day/time (Coming Soon)\n                    </Button>\n                  </div>\n                )}\n              </div>\n            )}\n\n            <Button \n              onClick={handleCompleteOrder}\n              className=\"w-full bg-primary text-white py-3 px-6 font-semibold hover:bg-primary-dark transition-colors mt-6\"\n            >\n              Complete Order - ${finalTotal.toFixed(2)}\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};\n","size_bytes":11200},"client/src/components/InspireMeModal.tsx":{"content":"import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogDescription } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAppContext } from \"@/contexts/AppContext\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Wand2, Loader2, CheckCircle, Heart, BookOpen } from \"lucide-react\";\nimport { useState, useEffect } from \"react\";\n\nexport const InspireMeModal = () => {\n  const { generateRecipes, addToCart, aiGeneratedRecipes, isGeneratingRecipes, cartItems } = useAppContext();\n  const { toast } = useToast();\n  const [open, setOpen] = useState(false);\n  const [addedItems, setAddedItems] = useState<Set<string>>(new Set());\n  const [savedRecipes, setSavedRecipes] = useState<Set<string>>(new Set());\n\n  // Generate recipes only when modal first opens and clear added items\n  useEffect(() => {\n    if (open && cartItems.length > 0 && aiGeneratedRecipes.length === 0) {\n      generateRecipes();\n    }\n    if (open) {\n      setAddedItems(new Set()); // Clear added items when modal opens\n    }\n  }, [open]);\n\n  const handleAddItem = (itemName: string, price: number) => {\n    addToCart({ \n      product_id: Date.now(), \n      product_name: itemName, \n      price_per_unit: price,\n      category: \"Grocery\",\n      brand: \"Fresh Market\",\n      size: \"1 unit\",\n      unit: \"unit\"\n    });\n    \n    // Add visual feedback\n    setAddedItems(prev => new Set([...Array.from(prev), itemName]));\n    toast({\n      title: \"Added to cart!\",\n      description: `${itemName} - $${price.toFixed(2)}`,\n      duration: 2000,\n    });\n    \n    // Remove the added state after 3 seconds\n    setTimeout(() => {\n      setAddedItems(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(itemName);\n        return newSet;\n      });\n    }, 3000);\n  };\n\n  const handleAddAllItems = (items: Array<any>) => {\n    items.forEach(item => {\n      addToCart({ \n        product_id: item.product_id || Date.now(), \n        product_name: item.product_name, \n        price_per_unit: item.price_per_unit,\n        category: item.category || \"Grocery\",\n        brand: item.brand || \"Fresh Market\",\n        size: item.size || \"1 unit\",\n        unit: item.unit || \"unit\"\n      });\n      \n      // Add visual feedback for each item\n      setAddedItems(prev => new Set([...Array.from(prev), item.product_name]));\n    });\n    \n    const totalPrice = items.reduce((sum, item) => sum + item.price_per_unit, 0);\n    toast({\n      title: `Added ${items.length} items to cart!`,\n      description: `Total: $${totalPrice.toFixed(2)}`,\n      duration: 3000,\n    });\n    \n    // Remove added states after 3 seconds\n    setTimeout(() => {\n      setAddedItems(new Set());\n    }, 3000);\n  };\n\n  const handleSaveRecipe = (recipeTitle: string) => {\n    setSavedRecipes(prev => new Set([...Array.from(prev), recipeTitle]));\n    toast({\n      title: \"Recipe saved!\",\n      description: `\"${recipeTitle}\" has been saved to your recipe collection`,\n      duration: 3000,\n    });\n    \n    // In a real app, this would save to a database or local storage\n    console.log('Saving recipe:', recipeTitle);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        <Button className=\"bg-accent text-white px-4 py-2 text-sm font-medium hover:bg-yellow-600 transition-colors\">\n          ✨ Inspire Me\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-hidden flex flex-col\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center\">\n            <Wand2 className=\"w-5 h-5 text-accent mr-2\" />\n            Recipe Inspiration\n          </DialogTitle>\n          <DialogDescription>\n            AI-generated recipes based on your cart items. Add ingredients directly to your cart!\n          </DialogDescription>\n        </DialogHeader>\n        \n        <div className=\"overflow-y-auto flex-1 p-1\">\n          {isGeneratingRecipes ? (\n            <div className=\"flex items-center justify-center py-12\">\n              <Loader2 className=\"w-8 h-8 animate-spin text-accent mr-3\" />\n              <span className=\"text-lg\">Generating personalized recipes with AI...</span>\n            </div>\n          ) : cartItems.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <p className=\"text-muted-foreground\">Add some items to your cart first to get recipe inspiration!</p>\n            </div>\n          ) : aiGeneratedRecipes.length > 0 ? (\n            <div className=\"space-y-6\">\n              {aiGeneratedRecipes.map((recipe, index) => (\n                <div key={index} className=\"border rounded-lg p-6\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <h3 className=\"text-lg font-semibold\">{recipe.title}</h3>\n                    <div className=\"flex items-center gap-2\">\n                      <Button\n                        size=\"sm\"\n                        variant={savedRecipes.has(recipe.title) ? \"default\" : \"outline\"}\n                        onClick={() => handleSaveRecipe(recipe.title)}\n                        disabled={savedRecipes.has(recipe.title)}\n                      >\n                        {savedRecipes.has(recipe.title) ? (\n                          <>\n                            <BookOpen className=\"w-3 h-3 mr-1\" />\n                            Saved\n                          </>\n                        ) : (\n                          <>\n                            <Heart className=\"w-3 h-3 mr-1\" />\n                            Save Recipe\n                          </>\n                        )}\n                      </Button>\n                      <span className=\"text-sm text-muted-foreground\">{recipe.cookingTime} • {recipe.difficulty}</span>\n                    </div>\n                  </div>\n                  \n                  <p className=\"text-muted-foreground mb-4\">{recipe.description}</p>\n                  \n                  <div className=\"grid md:grid-cols-2 gap-4\">\n                    <div>\n                      <h4 className=\"font-medium mb-2\">Ingredients:</h4>\n                      <ul className=\"space-y-1 text-sm\">\n                        {recipe.ingredients?.map((ingredient: any, i: number) => (\n                          <li key={i} className={ingredient.inCart ? \"text-green-600 font-medium\" : \"text-muted-foreground\"}>\n                            {ingredient.amount} {ingredient.name} \n                            {ingredient.inCart && \" ✓\"}\n                          </li>\n                        ))}\n                      </ul>\n                      \n                      {recipe.additionalIngredients?.length > 0 && (\n                        <div className=\"mt-4\">\n                          <h5 className=\"font-medium mb-2\">Missing Ingredients (Personalized):</h5>\n                          <div className=\"space-y-3\">\n                            {recipe.additionalIngredients.map((ingredient: any, i: number) => (\n                              <div key={i} className=\"p-3 bg-yellow-50 rounded-lg border\">\n                                <div className=\"font-medium text-gray-800 mb-2\">{ingredient.name}</div>\n                                <div className=\"space-y-2\">\n                                  {ingredient.options?.map((option: any, optIdx: number) => (\n                                    <div key={optIdx} className=\"flex items-center justify-between text-sm bg-white p-2 rounded border\">\n                                      <div className=\"flex-1\">\n                                        <div className=\"font-medium\">{option.product_name}</div>\n                                        <div className=\"text-xs text-muted-foreground\">\n                                          {option.brand} • {option.size}\n                                        </div>\n                                        {option.kumo_rank && (\n                                          <div className=\"text-xs text-blue-600 font-medium\">\n                                            Rank #{option.kumo_rank} for you\n                                          </div>\n                                        )}\n                                      </div>\n                                      <div className=\"flex items-center gap-2 ml-2\">\n                                        <span className=\"text-muted-foreground\">${option.price_per_unit.toFixed(2)}</span>\n                                        <Button \n                                          size=\"sm\" \n                                          variant={addedItems.has(option.product_name) ? \"default\" : \"outline\"}\n                                          onClick={() => handleAddItem(option.product_name, option.price_per_unit)}\n                                          disabled={addedItems.has(option.product_name)}\n                                        >\n                                          {addedItems.has(option.product_name) ? (\n                                            <>\n                                              <CheckCircle className=\"w-3 h-3 mr-1\" />\n                                              Added\n                                            </>\n                                          ) : (\n                                            \"Add\"\n                                          )}\n                                        </Button>\n                                      </div>\n                                    </div>\n                                  )) || (\n                                    // Fallback for old format\n                                    <div className=\"flex items-center justify-between text-sm bg-white p-2 rounded border\">\n                                      <div>\n                                        <span className=\"font-medium\">{ingredient.product_name}</span>\n                                        <div className=\"text-xs text-muted-foreground\">\n                                          {ingredient.brand} • {ingredient.size}\n                                        </div>\n                                      </div>\n                                      <div className=\"flex items-center gap-2\">\n                                        <span className=\"text-muted-foreground\">${ingredient.price_per_unit.toFixed(2)}</span>\n                                        <Button \n                                          size=\"sm\" \n                                          variant={addedItems.has(ingredient.product_name) ? \"default\" : \"outline\"}\n                                          onClick={() => handleAddItem(ingredient.product_name, ingredient.price_per_unit)}\n                                          disabled={addedItems.has(ingredient.product_name)}\n                                        >\n                                          {addedItems.has(ingredient.product_name) ? (\n                                            <>\n                                              <CheckCircle className=\"w-3 h-3 mr-1\" />\n                                              Added\n                                            </>\n                                          ) : (\n                                            \"Add\"\n                                          )}\n                                        </Button>\n                                      </div>\n                                    </div>\n                                  )}\n                                </div>\n                              </div>\n                            ))}\n                            <Button \n                              size=\"sm\" \n                              className=\"w-full mt-2\"\n                              onClick={() => {\n                                const topChoices = recipe.additionalIngredients.map((ing: any) => \n                                  ing.options?.find((opt: any) => (opt.kumo_rank || 999) === 1) || \n                                  ing.options?.[0] || \n                                  ing\n                                );\n                                handleAddAllItems(topChoices);\n                              }}\n                              disabled={recipe.additionalIngredients.every((ing: any) => {\n                                const topChoice = ing.options?.find((opt: any) => (opt.kumo_rank || 999) === 1) || \n                                               ing.options?.[0] || \n                                               ing;\n                                return addedItems.has(topChoice.product_name);\n                              })}\n                            >\n                              {recipe.additionalIngredients.every((ing: any) => {\n                                const topChoice = ing.options?.find((opt: any) => (opt.kumo_rank || 999) === 1) || \n                                               ing.options?.[0] || \n                                               ing;\n                                return addedItems.has(topChoice.product_name);\n                              }) ? (\n                                <>\n                                  <CheckCircle className=\"w-3 h-3 mr-1\" />\n                                  All Top Choices Added\n                                </>\n                              ) : (\n                                \"Add Top Personalized Choices\"\n                              )}\n                            </Button>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                    \n                    <div>\n                      <h4 className=\"font-medium mb-2\">Instructions:</h4>\n                      <ol className=\"space-y-1 text-sm list-decimal list-inside\">\n                        {recipe.instructions?.map((step: string, i: number) => (\n                          <li key={i} className=\"text-muted-foreground\">{step}</li>\n                        ))}\n                      </ol>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-12\">\n              <p className=\"text-muted-foreground\">No recipes generated. Try adding more items to your cart!</p>\n            </div>\n          )}\n        </div>\n        \n        {/* Done button at bottom - fixed within modal */}\n        <div className=\"border-t pt-4 mt-4 flex-shrink-0\">\n          <Button \n            onClick={() => setOpen(false)} \n            className=\"w-full\"\n            variant=\"default\"\n          >\n            Done\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};\n","size_bytes":14655},"client/src/components/ProductCard.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { MockProduct } from \"@/lib/mockApi\";\nimport { Plus } from \"lucide-react\";\n\ninterface ProductCardProps {\n  product: MockProduct;\n  onAdd: (product: MockProduct) => void;\n}\n\nexport const ProductCard = ({ product, onAdd }: ProductCardProps) => {\n  return (\n    <div className=\"border border-gray-200 rounded-lg p-4 hover:border-primary hover:shadow-md transition-all cursor-pointer\">\n      <div className=\"flex items-center justify-between mb-2\">\n        <h3 className=\"font-medium text-gray-900 text-sm\">{product.product_name}</h3>\n        <span className=\"text-primary font-semibold text-sm\">${product.price_per_unit.toFixed(2)}</span>\n      </div>\n      <div className=\"text-xs text-gray-500 mb-1\">{product.brand} - {product.size}</div>\n      <p className=\"text-xs text-gray-600 mb-3\">Recommended for you</p>\n      <Button \n        onClick={() => onAdd(product)} \n        className=\"w-full bg-primary text-white py-2 px-3 text-xs font-medium hover:bg-primary-dark transition-colors\"\n        size=\"sm\"\n      >\n        <Plus className=\"w-3 h-3 mr-1\" />\n        Add to Cart\n      </Button>\n    </div>\n  );\n};\n","size_bytes":1163},"client/src/components/RecipeCard.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { MockRecipe } from \"@/lib/mockApi\";\nimport { Plus } from \"lucide-react\";\n\ninterface RecipeCardProps {\n  recipe: MockRecipe;\n  onAddItem?: (itemName: string, price: number) => void;\n  onAddAllItems?: (items: Array<{ name: string; price: number }>) => void;\n}\n\nexport const RecipeCard = ({ recipe, onAddItem, onAddAllItems }: RecipeCardProps) => {\n  return (\n    <div className=\"border border-gray-200 rounded-lg p-5 hover:border-primary transition-colors\">\n      <h3 className=\"font-semibold text-gray-900 mb-2\">{recipe.title}</h3>\n      <p className=\"text-sm text-gray-600 mb-4\">{recipe.description}</p>\n      \n      <div className=\"mb-4\">\n        <h4 className=\"text-sm font-medium text-gray-900 mb-2\">Missing Ingredients:</h4>\n        <div className=\"space-y-2\">\n          {recipe.missingItems.map((item, index) => (\n            <div key={index} className=\"flex items-center justify-between text-sm\">\n              <span className=\"text-gray-700\">{item.product_name}</span>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"text-primary hover:text-primary-dark font-medium\"\n                onClick={() => onAddItem?.(item.product_name, item.price_per_unit)}\n              >\n                <Plus className=\"w-3 h-3 mr-1\" />\n                Add ${item.price_per_unit.toFixed(2)}\n              </Button>\n            </div>\n          ))}\n        </div>\n      </div>\n      \n      <Button\n        className=\"w-full bg-accent text-white py-2 px-4 text-sm font-medium hover:bg-yellow-600 transition-colors\"\n        onClick={() => onAddAllItems?.(recipe.missingItems)}\n      >\n        Add All Missing Items\n      </Button>\n    </div>\n  );\n};\n","size_bytes":1750},"client/src/components/SearchBar.tsx":{"content":"import { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Search, ArrowRight } from \"lucide-react\";\n\nexport const SearchBar = () => {\n  return (\n    <div className=\"fixed bottom-4 left-1/2 transform -translate-x-1/2 z-30\">\n      <div className=\"bg-surface border border-gray-300 rounded-full shadow-lg px-4 py-2 flex items-center space-x-3 min-w-96\">\n        <Search className=\"w-4 h-4 text-gray-400\" />\n        <Input \n          type=\"text\" \n          placeholder=\"Search for products...\" \n          className=\"flex-1 border-none outline-none shadow-none text-sm bg-transparent p-0 focus-visible:ring-0\"\n        />\n        <Button size=\"sm\" className=\"bg-primary text-white p-2 rounded-full hover:bg-primary-dark transition-colors\">\n          <ArrowRight className=\"w-3 h-3\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n","size_bytes":876},"client/src/components/UserProfileSwitcher.tsx":{"content":"import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useAppContext } from \"@/contexts/AppContext\";\n\nexport const UserProfileSwitcher = () => {\n  const { activeUserID, setActiveUserID, users } = useAppContext();\n\n  return (\n    <div className=\"flex items-center space-x-4\">\n      <div className=\"flex items-center space-x-2\">\n        <label htmlFor=\"user-select\" className=\"text-sm font-medium text-gray-700\">\n          Active User:\n        </label>\n        <Select value={activeUserID} onValueChange={setActiveUserID}>\n          <SelectTrigger className=\"w-64 bg-surface border-gray-300\">\n            <SelectValue placeholder=\"Select user\" />\n          </SelectTrigger>\n          <SelectContent>\n            {users.map(user => (\n              <SelectItem key={user.user_id} value={user.user_id.toString()}>\n                {user.user_id} - Household: {user.household_size}, Diet: {user.dietary_preference}, Shops: {user.primary_shopping_day}\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n      </div>\n    </div>\n  );\n};\n","size_bytes":1123},"client/src/contexts/AppContext.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { MockUser, MockCartItem, MockProduct, MockRecipe, MockDeliveryPrediction, loadUsersFromCSV, loadProductsFromCSV, mockInitialCarts, mockRecommendations, mockRecipes, mockDeliveryPredictions } from '@/lib/mockApi';\n\ninterface AppContextType {\n  activeUserID: string;\n  setActiveUserID: (id: string) => void;\n  users: MockUser[];\n  cartItems: MockCartItem[];\n  recommendations: MockProduct[];\n  recipes: MockRecipe[];\n  deliveryPredictions: MockDeliveryPrediction | null;\n  updateCartItemQuantity: (id: number, quantity: number) => void;\n  removeCartItem: (id: number) => void;\n  addToCart: (product: MockProduct) => void;\n  updateCartItemSubstitution: (id: number, allowSubstitutions: boolean) => void;\n  cartTotal: number;\n  itemCount: number;\n  allProducts: MockProduct[];\n  generateRecipes: () => Promise<void>;\n  aiGeneratedRecipes: any[];\n  isGeneratingRecipes: boolean;\n  isLoadingCart: boolean;\n}\n\nconst AppContext = createContext<AppContextType | undefined>(undefined);\n\nexport const useAppContext = () => {\n  const context = useContext(AppContext);\n  if (context === undefined) {\n    throw new Error('useAppContext must be used within an AppProvider');\n  }\n  return context;\n};\n\ninterface AppProviderProps {\n  children: ReactNode;\n}\n\nexport const AppProvider = ({ children }: AppProviderProps) => {\n  const [activeUserID, setActiveUserID] = useState<string>(\"1\");\n  const [users, setUsers] = useState<MockUser[]>([]);\n  const [cartItems, setCartItems] = useState<MockCartItem[]>([]);\n  const [allProducts, setAllProducts] = useState<MockProduct[]>([]);\n  const [aiGeneratedRecipes, setAiGeneratedRecipes] = useState<any[]>([]);\n  const [isGeneratingRecipes, setIsGeneratingRecipes] = useState(false);\n  const [isLoadingCart, setIsLoadingCart] = useState(false);\n  const [dataLoaded, setDataLoaded] = useState(false);\n\n  // Load users and products from CSV on mount\n  useEffect(() => {\n    if (dataLoaded) return; // Prevent multiple loads\n    \n    const loadData = async () => {\n      const [loadedUsers, loadedProducts] = await Promise.all([\n        loadUsersFromCSV(),\n        loadProductsFromCSV()\n      ]);\n      \n      let finalUsers: MockUser[];\n      if (loadedUsers.length > 0) {\n        finalUsers = loadedUsers;\n        setUsers(loadedUsers);\n      } else {\n        // Fallback to hardcoded users if CSV loading fails\n        finalUsers = [\n          { user_id: 1, household_size: 1, dietary_preference: \"none\", primary_shopping_day: \"Monday\" },\n          { user_id: 2, household_size: 2, dietary_preference: \"vegetarian\", primary_shopping_day: \"Sunday\" },\n          { user_id: 3, household_size: 1, dietary_preference: \"none\", primary_shopping_day: \"Wednesday\" },\n          { user_id: 4, household_size: 1, dietary_preference: \"none\", primary_shopping_day: \"Saturday\" }\n        ];\n        setUsers(finalUsers);\n      }\n      \n      // Always set a random user on initial load\n      if (finalUsers.length > 0) {\n        const randomIndex = Math.floor(Math.random() * finalUsers.length);\n        const randomUserId = finalUsers[randomIndex].user_id.toString();\n        setActiveUserID(randomUserId);\n      }\n      \n      if (loadedProducts.length > 0) {\n        setAllProducts(loadedProducts);\n      }\n      \n      setDataLoaded(true);\n    };\n    loadData();\n  }, [dataLoaded, activeUserID]);\n\n  // Fetch cart predictions from AI service\n  const fetchCartPredictions = async (userId: string) => {\n    try {\n      setIsLoadingCart(true);\n      setCartItems([]); // Clear cart immediately when switching users\n      const response = await fetch(`/api/predict/cart/${userId}?numItems=20`);\n      if (response.ok) {\n        const predictions = await response.json();\n        \n        // Split predictions: all except last 3 for cart, last 3 for recommendations\n        const numForRecommendations = Math.min(3, predictions.length);\n        const cartPredictions = predictions.slice(0, predictions.length - numForRecommendations);\n        const recommendationPredictions = predictions.slice(-numForRecommendations);\n        \n        // Convert cart predictions to cart items format\n        const cartItems = cartPredictions.map((pred: any) => ({\n          id: pred.product_id,\n          product_id: pred.product_id,\n          product_name: pred.product_name,\n          brand: pred.brand || \"Unknown\",\n          quantity: pred.quantity || 1,\n          price_per_unit: pred.price_per_unit,\n          allow_substitutions: undefined // Will be set when user interacts with cart item\n        }));\n        setCartItems(cartItems);\n        \n        // Convert remaining predictions to recommendations format\n        const recommendationItems = recommendationPredictions.map((pred: any) => ({\n          product_id: pred.product_id,\n          product_name: pred.product_name,\n          brand: pred.brand || \"Unknown\",\n          category: pred.category || \"Unknown\",\n          size: pred.size || \"1 unit\",\n          unit: pred.unit || \"unit\",\n          price_per_unit: pred.price_per_unit\n        }));\n        setRecommendations(recommendationItems);\n      } else {\n        console.warn('AI service unavailable, using fallback data');\n        const userCart = mockInitialCarts[userId] || [];\n        setCartItems(userCart);\n      }\n    } catch (error) {\n      console.error('Failed to fetch cart predictions:', error);\n      const userCart = mockInitialCarts[userId] || [];\n      setCartItems(userCart);\n    } finally {\n      setIsLoadingCart(false);\n    }\n  };\n\n  // Update cart when user changes and clear recipes\n  useEffect(() => {\n    if (dataLoaded && activeUserID) {\n      fetchCartPredictions(activeUserID);\n      setAiGeneratedRecipes([]); // Clear AI recipes when user changes\n    }\n  }, [activeUserID, dataLoaded]);\n\n  const [recommendations, setRecommendations] = useState<MockProduct[]>([]);\n  const [isLoadingRecommendations, setIsLoadingRecommendations] = useState(false);\n\n  // Fetch recommendations from AI service\n  const fetchRecommendations = async (userId: string) => {\n    try {\n      setIsLoadingRecommendations(true);\n      const response = await fetch(`/api/predict/recommendations/${userId}?numItems=3`);\n      if (response.ok) {\n        const predictions = await response.json();\n        setRecommendations(predictions);\n      } else {\n        console.warn('AI service unavailable for recommendations, using fallback data');\n        const userRecommendations = mockRecommendations[userId] || [];\n        setRecommendations(userRecommendations);\n      }\n    } catch (error) {\n      console.error('Failed to fetch recommendations:', error);\n      const userRecommendations = mockRecommendations[userId] || [];\n      setRecommendations(userRecommendations);\n    } finally {\n      setIsLoadingRecommendations(false);\n    }\n  };\n\n  // Recommendations are now set along with cart predictions, no separate fetch needed\n\n  // Get current user data (still using mock data for recipes and delivery predictions)\n  const recipes = mockRecipes[activeUserID] || [];\n  const deliveryPredictions = mockDeliveryPredictions[activeUserID] || null;\n\n  // Cart calculations\n  const cartTotal = cartItems.reduce((total, item) => total + (item.price_per_unit * item.quantity), 0);\n  const itemCount = cartItems.reduce((count, item) => count + item.quantity, 0);\n\n  // Cart management functions\n  const updateCartItemQuantity = (id: number, quantity: number) => {\n    if (quantity <= 0) {\n      removeCartItem(id);\n      return;\n    }\n    setCartItems(prev => prev.map(item => \n      item.id === id ? { ...item, quantity } : item\n    ));\n  };\n\n  const removeCartItem = (id: number) => {\n    setCartItems(prev => prev.filter(item => item.id !== id));\n  };\n\n  const addToCart = (product: MockProduct) => {\n    const existingItem = cartItems.find(item => item.product_name === product.product_name);\n    if (existingItem) {\n      updateCartItemQuantity(existingItem.id, existingItem.quantity + 1);\n    } else {\n      const newItem: MockCartItem = {\n        id: Date.now(), // Simple ID generation for demo\n        product_id: product.product_id,\n        product_name: product.product_name,\n        brand: product.brand,\n        price_per_unit: product.price_per_unit,\n        quantity: 1,\n        allow_substitutions: undefined // Will be set by user in cart\n      };\n      setCartItems(prev => [...prev, newItem]);\n    }\n  };\n\n  const updateCartItemSubstitution = (id: number, allowSubstitutions: boolean) => {\n    setCartItems(prev => prev.map(item => \n      item.id === id ? { ...item, allow_substitutions: allowSubstitutions } : item\n    ));\n  };\n\n  const generateRecipes = async () => {\n    try {\n      setIsGeneratingRecipes(true);\n      const response = await fetch('/api/recipes/generate', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ cartItems, userId: parseInt(activeUserID) }),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        setAiGeneratedRecipes(data.recipes);\n      } else {\n        console.error('Failed to generate recipes');\n        setAiGeneratedRecipes([]);\n      }\n    } catch (error) {\n      console.error('Recipe generation error:', error);\n      setAiGeneratedRecipes([]);\n    } finally {\n      setIsGeneratingRecipes(false);\n    }\n  };\n\n  return (\n    <AppContext.Provider value={{\n      activeUserID,\n      setActiveUserID,\n      users,\n      cartItems,\n      recommendations,\n      recipes,\n      deliveryPredictions,\n      updateCartItemQuantity,\n      removeCartItem,\n      addToCart,\n      updateCartItemSubstitution,\n      cartTotal,\n      itemCount,\n      allProducts,\n      generateRecipes,\n      aiGeneratedRecipes,\n      isGeneratingRecipes,\n      isLoadingCart\n    }}>\n      {children}\n    </AppContext.Provider>\n  );\n};\n","size_bytes":9876},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/mockApi.ts":{"content":"import Papa from 'papaparse';\n\nexport interface MockUser {\n  user_id: number;\n  household_size: number;\n  dietary_preference: string;\n  primary_shopping_day: string;\n}\n\nexport interface MockProduct {\n  product_id: number;\n  product_name: string;\n  category: string;\n  brand: string;\n  size: string;\n  unit: string;\n  price_per_unit: number;\n}\n\nexport interface MockCartItem {\n  id: number;\n  product_id?: number; // Add product_id for substitution rate lookup\n  product_name: string;\n  brand: string;\n  quantity: number;\n  price_per_unit: number;\n  allow_substitutions?: boolean; // Add substitution preference\n}\n\nexport interface MockRecipe {\n  id: number;\n  title: string;\n  description: string;\n  missingItems: Array<{\n    product_name: string;\n    price_per_unit: number;\n  }>;\n}\n\nexport interface MockDeliveryPrediction {\n  predicted_method: string;\n  predicted_time_window: string;\n}\n\n// Mock data based on CSV structure\nexport const mockInitialCarts: Record<string, MockCartItem[]> = {\n  \"1\": [\n    { id: 1, product_name: \"Organic Fuji Apples\", brand: \"Nature's Best\", quantity: 2, price_per_unit: 3.49 },\n    { id: 2, product_name: \"Fresh Carrots\", brand: \"Garden Fresh\", quantity: 1, price_per_unit: 0.99 }\n  ],\n  \"2\": [\n    { id: 3, product_name: \"Vivid Red Tomatoes\", brand: \"Sunny Farms\", quantity: 1, price_per_unit: 2.99 },\n    { id: 4, product_name: \"Sweet Bell Peppers\", brand: \"Farmhouse\", quantity: 2, price_per_unit: 2.49 }\n  ],\n  \"3\": [\n    { id: 5, product_name: \"Organic Fuji Apples\", brand: \"Nature's Best\", quantity: 1, price_per_unit: 3.49 },\n    { id: 6, product_name: \"Fresh Carrots\", brand: \"Garden Fresh\", quantity: 3, price_per_unit: 0.99 }\n  ],\n  \"4\": [\n    { id: 7, product_name: \"Sweet Bell Peppers\", brand: \"Farmhouse\", quantity: 1, price_per_unit: 2.49 },\n    { id: 8, product_name: \"Vivid Red Tomatoes\", brand: \"Sunny Farms\", quantity: 1, price_per_unit: 2.99 }\n  ]\n};\n\nexport const mockRecommendations: Record<string, MockProduct[]> = {\n  \"1\": [\n    { product_id: 1, product_name: \"Organic Fuji Apples\", category: \"Produce\", brand: \"Nature's Best\", size: \"3 lb\", unit: \"lb\", price_per_unit: 3.49 },\n    { product_id: 3, product_name: \"Fresh Carrots\", category: \"Produce\", brand: \"Garden Fresh\", size: \"1 lb\", unit: \"lb\", price_per_unit: 0.99 }\n  ],\n  \"2\": [\n    { product_id: 2, product_name: \"Vivid Red Tomatoes\", category: \"Produce\", brand: \"Sunny Farms\", size: \"2 lb\", unit: \"lb\", price_per_unit: 2.99 },\n    { product_id: 4, product_name: \"Sweet Bell Peppers\", category: \"Produce\", brand: \"Farmhouse\", size: \"1.5 lb\", unit: \"lb\", price_per_unit: 2.49 }\n  ],\n  \"3\": [\n    { product_id: 3, product_name: \"Fresh Carrots\", category: \"Produce\", brand: \"Garden Fresh\", size: \"1 lb\", unit: \"lb\", price_per_unit: 0.99 },\n    { product_id: 1, product_name: \"Organic Fuji Apples\", category: \"Produce\", brand: \"Nature's Best\", size: \"3 lb\", unit: \"lb\", price_per_unit: 3.49 }\n  ],\n  \"4\": [\n    { product_id: 4, product_name: \"Sweet Bell Peppers\", category: \"Produce\", brand: \"Farmhouse\", size: \"1.5 lb\", unit: \"lb\", price_per_unit: 2.49 },\n    { product_id: 2, product_name: \"Vivid Red Tomatoes\", category: \"Produce\", brand: \"Sunny Farms\", size: \"2 lb\", unit: \"lb\", price_per_unit: 2.99 }\n  ]\n};\n\nexport const mockRecipes: Record<string, MockRecipe[]> = {\n  \"1\": [\n    {\n      id: 1,\n      title: \"Fresh Garden Salad\",\n      description: \"Simple and healthy salad perfect for a single person.\",\n      missingItems: [\n        { product_name: \"Vivid Red Tomatoes\", price_per_unit: 2.99 },\n        { product_name: \"Sweet Bell Peppers\", price_per_unit: 2.49 }\n      ]\n    }\n  ],\n  \"2\": [\n    {\n      id: 2,\n      title: \"Vegetarian Stir Fry\",\n      description: \"Colorful vegetable stir fry perfect for vegetarian households.\",\n      missingItems: [\n        { product_name: \"Organic Fuji Apples\", price_per_unit: 3.49 },\n        { product_name: \"Fresh Carrots\", price_per_unit: 0.99 }\n      ]\n    }\n  ],\n  \"3\": [\n    {\n      id: 3,\n      title: \"Simple Roasted Vegetables\",\n      description: \"Basic roasted vegetable dish that's budget-friendly.\",\n      missingItems: [\n        { product_name: \"Sweet Bell Peppers\", price_per_unit: 2.49 }\n      ]\n    }\n  ],\n  \"4\": [\n    {\n      id: 4,\n      title: \"Gourmet Vegetable Medley\",\n      description: \"Elevated vegetable dish with premium produce.\",\n      missingItems: [\n        { product_name: \"Organic Fuji Apples\", price_per_unit: 3.49 }\n      ]\n    }\n  ]\n};\n\nexport const mockDeliveryPredictions: Record<string, MockDeliveryPrediction> = {\n  \"1\": { predicted_method: \"delivery\", predicted_time_window: \"Saturday 5pm-7pm\" },\n  \"2\": { predicted_method: \"pickup\", predicted_time_window: \"Sunday 9am-11am\" },\n  \"3\": { predicted_method: \"pickup\", predicted_time_window: \"Friday 3pm-5pm\" },\n  \"4\": { predicted_method: \"delivery\", predicted_time_window: \"Same day 1pm-3pm\" }\n};\n\n// CSV loading functions\nexport const loadUsersFromCSV = async (): Promise<MockUser[]> => {\n  try {\n    const response = await fetch('/src/data/users.csv');\n    const csvText = await response.text();\n    \n    return new Promise((resolve) => {\n      Papa.parse<any>(csvText, {\n        header: true,\n        complete: (results) => {\n          const users = results.data\n            .filter(row => row.user_id && row.household_size)\n            .map(row => ({\n              user_id: parseInt(row.user_id),\n              household_size: parseInt(row.household_size),\n              dietary_preference: row.dietary_preference?.trim() || '',\n              primary_shopping_day: row.primary_shopping_day?.trim() || ''\n            }));\n          resolve(users);\n        },\n        transformHeader: (header) => header.trim()\n      });\n    });\n  } catch (error) {\n    console.error('Error loading users CSV:', error);\n    return [];\n  }\n};\n\nexport const loadProductsFromCSV = async (): Promise<MockProduct[]> => {\n  try {\n    const response = await fetch('/src/data/products.csv');\n    const csvText = await response.text();\n    \n    return new Promise((resolve) => {\n      Papa.parse<any>(csvText, {\n        header: true,\n        complete: (results) => {\n          const products = results.data\n            .filter(row => row.product_id && row.product_name)\n            .map(row => ({\n              product_id: parseInt(row.product_id),\n              product_name: row.product_name?.trim() || '',\n              category: row.category?.trim() || '',\n              brand: row.brand?.trim() || '',\n              size: row.size?.trim() || '',\n              unit: row.unit?.trim() || '',\n              price_per_unit: parseFloat(row.price_per_unit) || 0\n            }));\n          resolve(products);\n        },\n        transformHeader: (header) => header.trim()\n      });\n    });\n  } catch (error) {\n    console.error('Error loading products CSV:', error);\n    return [];\n  }\n};\n","size_bytes":6813},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Home.tsx":{"content":"import { UserProfileSwitcher } from \"@/components/UserProfileSwitcher\";\nimport { ProductCard } from \"@/components/ProductCard\";\nimport { CartItem } from \"@/components/CartItem\";\nimport { InspireMeModal } from \"@/components/InspireMeModal\";\nimport { CheckoutView } from \"@/components/CheckoutView\";\nimport { SearchBar } from \"@/components/SearchBar\";\nimport { useAppContext } from \"@/contexts/AppContext\";\nimport { Button } from \"@/components/ui/button\";\nimport { ShoppingCart, Star, Brain, CreditCard } from \"lucide-react\";\nimport { useState } from \"react\";\n\nexport default function Home() {\n  const { \n    cartItems, \n    recommendations, \n    updateCartItemQuantity, \n    removeCartItem, \n    addToCart, \n    updateCartItemSubstitution,\n    cartTotal, \n    itemCount,\n    isLoadingCart \n  } = useAppContext();\n  \n  const [checkoutOpen, setCheckoutOpen] = useState(false);\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"bg-surface shadow-sm border-b border-gray-200 sticky top-0 z-40\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-2\">\n                <ShoppingCart className=\"text-primary text-xl\" />\n                <h1 className=\"text-xl font-bold text-gray-900\">Smart Grocer</h1>\n              </div>\n              <span className=\"hidden sm:inline-block text-sm text-gray-500 bg-gray-100 px-2 py-1 rounded-full\">\n                KumoAI Hackathon Demo 2025\n              </span>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              <UserProfileSwitcher />\n              <Button \n                onClick={() => setCheckoutOpen(true)}\n                className=\"bg-primary text-white px-4 py-2 text-sm font-medium hover:bg-primary-dark transition-colors\"\n              >\n                <CreditCard className=\"w-4 h-4 mr-2\" />\n                Checkout\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Left Column - Shopping Cart */}\n          <div className=\"lg:col-span-2\">\n            <div className=\"bg-surface rounded-xl shadow-sm border border-gray-200 p-6\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <h2 className=\"text-xl font-semibold text-gray-900\">\n                  <ShoppingCart className=\"text-primary mr-2 inline-block\" />\n                  Your Cart\n                </h2>\n                <InspireMeModal />\n              </div>\n\n              {/* Cart Items List */}\n              <div className=\"space-y-4\" id=\"cart-items\">\n                {isLoadingCart ? (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    🧠 AI is personalizing your cart...\n                  </div>\n                ) : cartItems.length > 0 ? (\n                  cartItems.map(item => (\n                    <CartItem\n                      key={item.id}\n                      item={item}\n                      onQuantityChange={updateCartItemQuantity}\n                      onRemove={removeCartItem}\n                      onUpdateSubstitution={updateCartItemSubstitution}\n                    />\n                  ))\n                ) : (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    Your cart is empty. Add some products to get started!\n                  </div>\n                )}\n              </div>\n\n              {/* Cart Summary */}\n              {cartItems.length > 0 && (\n                <div className=\"mt-6 pt-6 border-t border-gray-200\">\n                  <div className=\"flex justify-between items-center text-lg font-semibold\">\n                    <span>Total:</span>\n                    <span className=\"text-primary\">${cartTotal.toFixed(2)}</span>\n                  </div>\n                  <p className=\"text-sm text-gray-600 mt-1\">\n                    {itemCount} item{itemCount !== 1 ? 's' : ''} in cart\n                  </p>\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Right Column - Recommendations */}\n          <div className=\"lg:col-span-1\">\n            <div className=\"bg-surface rounded-xl shadow-sm border border-gray-200 p-6\">\n              <h2 className=\"text-lg font-semibold text-gray-900 mb-4\">\n                <Star className=\"text-accent mr-2 inline-block\" />\n                Recommended for You\n              </h2>\n              \n              <div className=\"space-y-3\" id=\"recommendations\">\n                {recommendations.map(product => (\n                  <ProductCard\n                    key={product.product_id}\n                    product={product}\n                    onAdd={addToCart}\n                  />\n                ))}\n              </div>\n\n              {/* Personalization Indicator */}\n              <div className=\"mt-6 p-3 bg-green-50 border border-green-200 rounded-lg\">\n                <div className=\"flex items-center\">\n                  <Brain className=\"text-green-600 mr-2 w-4 h-4\" />\n                  <span className=\"text-xs text-green-800 font-medium\">\n                    AI-powered recommendations based on your shopping history\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </main>\n\n      {/* Checkout Modal */}\n      <CheckoutView open={checkoutOpen} onOpenChange={setCheckoutOpen} />\n\n      {/* Search Bar */}\n      <SearchBar />\n    </div>\n  );\n}\n","size_bytes":5790},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}