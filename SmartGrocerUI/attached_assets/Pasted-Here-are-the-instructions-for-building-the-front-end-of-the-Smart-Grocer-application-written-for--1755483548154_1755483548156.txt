Here are the instructions for building the front-end of the "Smart Grocer" application, written for a junior software engineer.

### **Project Brief**

We're building a demo for the "Smart Grocer" application for a one-day hackathon. The app's core feature is a hyper-personalized shopping cart that predicts what a user will buy. Our goal is to build a high-fidelity front-end prototype that showcases this personalization. For this first pass, we will use a fixed set of mock data instead of live API calls.

### **Primary Goal: "Scaffold First, Predict Later"**

Your main objective is to build a fully interactive and visually polished front-end application based on a set of predefined mock data fixtures. The entire user experience should be functional before we wire it up to the KumoRFM prediction engine.

-----

### \#\# Step 1: Setup & State Management

Set up your preferred front-end framework (React is recommended). The most critical piece of architecture is the global state for the active user.

  * **User Personas:** We need to demonstrate personalization. To do this, create a simple way to switch between two distinct user profiles. These `user_id`s correspond to the `user_id` primary key in the `users.csv` file.

  * **State Management:** Create a global state to hold the `activeUserID`. You can use React Context or a simple state variable in the root `App` component. All other components will read from this state to determine which user's data to display.

    ```javascript
    // src/App.js (example)
    const [activeUserID, setActiveUserID] = useState("1"); // Default to User 1
    ```

-----

### \#\# Step 2: Build Reusable UI Components

Build these stateless components first. They will be the building blocks of our application.

  * **`ProductCard` Component**

      * **Purpose:** Displays a single product in a list (like the recommendations sidebar).
      * **Props:** It should accept a `product` object. The data for this will ultimately come from the `products.csv` table.
          * `product.name` (string)
          * `product.price` (number)
          * `onAdd` (function)

  * **`CartItem` Component**

      * **Purpose:** Displays a single row in the main shopping cart.
      * **Props:** It should accept an `item` object. This represents a record from the `order_items.csv` table.
          * `item.name` (string)
          * `item.quantity` (number)
          * `item.price` (number)
          * `onQuantityChange` (function)
          * `onRemove` (function)

  * **`RecipeCard` Component**

      * **Purpose:** Displays a single recipe in the "Inspire Me" modal.
      * **Props:** It should accept a `recipe` object.
          * `recipe.title` (string)
          * `recipe.image` (string)
          * `recipe.missingItems` (array of product objects)

-----

### \#\# Step 3: Assemble the Main Application Views

Compose the core components into the main application views.

#### **`UserProfileSwitcher` Component**

  * **Purpose:** Allows the presenter to switch the `activeUserID`.
  * **UI:** A simple set of buttons (e.g., "Busy Family," "Vegan Athlete").
  * **Functionality:** Each button's `onClick` handler should call the `setActiveUserID` function from the global state with the corresponding ID (`"1"` or `"2"`).

#### **`SmartCartView` Component (The Main Page)**

  * **Layout:** A two-column layout.
  * **Functionality:** This component will read the `activeUserID` from the global state. It will use this ID to select the correct data from your mock data file.
      * **Left Column (Cart):** Renders a list of `CartItem` components using the mock initial cart data for the active user. It should also contain the "✨ Inspire Me" button.
      * **Right Column (Recommendations):** Renders a list of `ProductCard` components using the mock recommendations data for the active user.

#### **`InspireMeModal` Component**

  * **Functionality:** An overlay that is toggled by the "✨ Inspire Me" button. It renders `RecipeCard` components using the mock recipe data for the `activeUserID`.

#### **`CheckoutView` Component (The Final Page)**

  * **Functionality:** Displays an order summary. It uses the `activeUserID` to pre-select the delivery method and time window, which correspond to the `delivery_method` and `delivery_time_window` fields in the `orders.csv` table.

-----

### \#\# Step 4: Create the Mock Data Fixtures

Create a single file (e.g., `src/mockApi.js`) to store all the mock data. This simulates the responses we'll eventually get from our APIs. The structure should be keyed by `user_id`.

```javascript
// src/mockApi.js

export const mockInitialCarts = {
  "1": [ // Corresponds to user_id 1 from users.csv
    { "id": 1, "name": "Organic Whole Milk (Gallon)", "quantity": 2, "price": 4.99 },
    { "id": 11, "name": "Cheerios Family Size", "quantity": 1, "price": 5.50 },
    { "id": 12, "name": "Chicken Breast Pack", "quantity": 2, "price": 9.99 }
  ],
  "2": [ // Corresponds to user_id 2 from users.csv
    { "id": 13, "name": "Oatly Oat Milk", "quantity": 1, "price": 4.25 },
    { "id": 14, "name": "Firm Tofu", "quantity": 2, "price": 2.99 }
  ]
};

export const mockRecommendations = {
  "1": [{ "id": 5, "name": "Kerrygold Butter", "price": 4.99 }],
  "2": [{ "id": 6, "name": "Organic Baby Spinach", "price": 3.50 }]
};

export const mockRecipes = {
  "1": [{ /* Recipe objects for user 1 */ }],
  "2": [{ /* Recipe objects for user 2 */ }]
};

export const mockDeliveryPredictions = {
  "1": { "predicted_method": "delivery", "predicted_time_window": "Saturday 5pm-7pm" },
  "2": { "predicted_method": "pickup", "predicted_time_window": "Sunday 9am-11am" }
};
```

Your final goal is a fully interactive prototype where clicking the user switcher instantly changes the entire set of displayed data, perfectly demonstrating the power of a personalized experience.